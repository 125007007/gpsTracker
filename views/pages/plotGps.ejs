<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js"></script>

    <title>Realtime location tracker</title>

    <!-- leaflet css  -->
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.7.1/dist/leaflet.css" />

    <style>
        body {
            margin: 0;
            padding: 0;
        }

        #map {
            width: 100%;
            height: 100vh;
        }
    </style>
</head>

<body>
    <div id="map"></div>
</body>
</html>

<!-- leaflet js  -->
<script src="https://unpkg.com/leaflet@1.7.1/dist/leaflet.js"></script>


<script language="javascript">
    function msToTime(ms) {
        let seconds = (ms / 1000).toFixed(1);
        let minutes = (ms / (1000 * 60)).toFixed(1);
        let hours = (ms / (1000 * 60 * 60)).toFixed(1);
        let days = (ms / (1000 * 60 * 60 * 24)).toFixed(1);
        if (seconds < 60) return seconds + " Sec";
        else if (minutes < 60) return minutes + " Min";
        else if (hours < 24) return hours + " Hrs";
        else return days + " Days"
      }

      const delayLoop = (fn, delay) => {
        return (x, i) => {
          setTimeout(() => {
            fn(x);
          }, i * delay);
        }
      };

      
    $.getJSON('gps.json', function(jsonData) {
               //var sorted = JSON.parse('sorted.json');
       //let sorted = require('sorted.json');
       var redIcon = new L.Icon({
        iconUrl: 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-red.png',
        shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.7/images/marker-shadow.png',
        iconSize: [25, 41],
        iconAnchor: [12, 41],
        popupAnchor: [1, -34],
        shadowSize: [41, 41]
        });

        var greenIcon = new L.Icon({
            iconUrl: 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-green.png',
            shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.7/images/marker-shadow.png',
            iconSize: [25, 41],
            iconAnchor: [12, 41],
            popupAnchor: [1, -34],
            shadowSize: [41, 41]
          });

        var orangeIcon = new L.Icon({
            iconUrl: 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-orange.png',
            shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.7/images/marker-shadow.png',
            iconSize: [25, 41],
            iconAnchor: [12, 41],
            popupAnchor: [1, -34],
            shadowSize: [41, 41]
          });
        
       let sorted = jsonData

        // create array for map center
        LatLon = []
        sorted.points.forEach(function(item, index) {
            var point = [item.lat, item.lon]
            //console.log(point)
            LatLon.push(point)
        
        })
        //console.log(LatLon)

       var map = L.map('map')
       var bounds = new L.LatLngBounds(LatLon);
        map.fitBounds(bounds);
              
         L.tileLayer('http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
          attribution: '&copy; <a href="http://openstreetmap.org">OpenStreetMap</a> contributors',
          maxZoom: 22,
          maxNativeZoom: 19
       }).addTo(map);
       map.attributionControl.setPrefix(''); // Don't show the 'Powered by Leaflet' text.

       
       // Define an array. This could be done in a seperate js file.
       // This tidy formatted section could even be generated by a server-side script
       // or fetched seperately as a jsonp request.
       var markers = sorted.points
       //console.log(markers);
       var prevTime = null
       markers.forEach(function(item, index) {

        if ( index > 0){
            var prev = index - 1
            var prevTime = new Date(sorted.points[prev].datetime)
        }
        
        var newTime = new Date(item.datetime)
        //console.log(item, index);
        //console.log(item.lat, item.lon, item.acc, item.batt, item.ischarging)
        var lon = item.lon;
        var lat = item.lat;
        //var popupText = item.datetime;

        var markerLocation = new L.LatLng(lat, lon);
        var timeDiff = newTime - prevTime

        // accuracy circle
        var circle = L.circle(markerLocation, {
            color: null,
            fillColor: '#777be6',
            fillOpacity: 0.25,
            radius: item.acc
        }).addTo(map);

        //console.log(timeDiff, newTime, prevTime)
        if ( timeDiff > 30e3) {
            //console.log(Math.floor(timeDiff / 30e3), 'secounds ago')
            var marker = new L.Marker(markerLocation, {icon: redIcon});
            //console.log(timeDiff / 60e3)

        } else if (index == 0 || index == sorted.points.length){
            var marker = new L.Marker(markerLocation, {icon: greenIcon});
        } else if (item.ischarging != 'true'){
            var marker = new L.Marker(markerLocation, {icon: orangeIcon});
        } else {
            var marker = new L.Marker(markerLocation);
        }

        map.addLayer(marker);
        var label = String('Marker Num: ' + index + 
                            '<br> Datetime: ' + item.datetime +
                            '<br> Battery: ' + item.batt + 
                            '<br> Charging: ' + item.ischarging +
                            '<br> Altitude: ' + item.alt +
                            '<br> Accuracy: ' + item.acc + 
                            '<br> Provider: ' + item.prov +
                            '<br> Distance: ' + item.dist +
                            '<br> Satellites: ' + item.sats +                           
                            '<br> Time from last point: ' + msToTime(timeDiff))

        marker.bindPopup(label);


       });
       /*
       //Loop through the markers array
       for (var i=0; i<markers.length; i++) {
         
            var lon = markers[i].lon;
            var lat = markers[i].lat;
            var popupText = markers[i].datetime;

            var markerLocation = new L.LatLng(lat, lon);
            var marker = new L.Marker(markerLocation);
            map.addLayer(marker);
            marker.bindPopup(popupText);
       
       }*/
    });
 </script>
